'''
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
    Author : thegothamstak
    Date : 4th April 2018

    The code is getting the desired result but takes a lot of time to get it. Working on optimizing the code.
'''
#   To calculate the time taken
import time

#   Start time recorded
start = time.time()

#    Function that counts the number of divisors of a number
def countDivisor(tri_num):
    divisor_count = 0
    for i in range(1, tri_num + 1):
        if(tri_num%i == 0):
            divisor_count += 1
    return divisor_count

#   Values initialzed
no = 1
tri_num = 0

#   It will loop through the triangle numbers and check which has divisors greater than 500
while(True):
    tri_num += no
    if(tri_num%10 == 0):
        divisor_count = countDivisor(tri_num)
        print(str(no)+' '+str(tri_num)+' '+str(divisor_count))
        if(divisor_count > 500):
            break
    no += 1

time_taken = time.time() - start

#   Printing the triangle number
print('The triangle number with more than 500 divisors is : '+str(tri_num))
print('Time taken in seconds is : '+str(time_taken))
